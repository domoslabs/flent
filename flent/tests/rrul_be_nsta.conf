## -*- mode: python; coding: utf-8 -*-

## rrul test specification
#import numpy as np
include("netperf_definitions.inc")
#len_remote_sta = np.size(np.asarray(REMOTE_STA))
#len_remote_sta = int(len(REMOTE_STA.copy()))
if REMOTE_STA:
    len_remote_sta = len(REMOTE_STA)
else:
    len_remote_sta = 2 #len(REMOTE_STA)

DESCRIPTION="RRUL parallell downloads to {0:d} STAs".format(len_remote_sta)
DEFAULTS={'PLOT': "all_scaled STA0"}

DATA_SETS = o([])

#Stats collection from the routers:
for router in REMOTE_METADATA:
    DATA_SETS.update([
        #("CPU Stats " + router,
         #{'test': 'CPU_STATS', 'interval': 0.2, 'length': LENGTH, 'host': router, 'units': '%', 'runner': 'domqos'}),
        ("Wi-Fi Stats " + router,
         {'test': 'Wi-Fi Stats', 'interface': 'phy0', 'interval': 0.2, 'length': LENGTH, 'host': router, 'stations': ['c8:09:a8:20:48:d8'], 'runner': 'wifi_stats'})
    ])

#Tests that will run on all STAs:

#Runners for data on each STA:
for i in range(len_remote_sta):
    DATA_SETS.update([
        ('TCP download BE' + ' STA' + str(i),
         {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS0,CS0',
          'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download BE1' + ' STA' + str(i),
         {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS0,CS0',
          'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download BE2' + ' STA' + str(i),
         {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS0,CS0',
          'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download BE3' + ' STA' + str(i),
         {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS0,CS0',
          'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download avg' + ' STA' + str(i),
         {'apply_to': [glob("TCP download*" + ' STA' + str(i), exclude=["TCP download sum"])],
          'units': 'Mbits/s',
          'runner': 'average',}),
        ('TCP download sum' + ' STA' + str(i),
         {'apply_to': [glob("TCP download*" + " STA" + str(i), exclude=["TCP download sum*","TCP download avg*"])],
          'units': 'Mbits/s',
          'runner': 'sum',}),
        ('TCP totals' + ' STA' + str(i),
         {'apply_to': [glob("TCP*" + " STA" + str(i), exclude=["TCP totals STA*","TCP download avg*", "TCP download sum*", "TCP upload avg*", "TCP upload sum*"])],
          'units': 'Mbits/s',
          'runner': 'sum',}),

        #('Packet loss',
        #  {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST,
        #  'units': 'Kbps',}
        ('Ping (ms) UDP EF' + ' STA' + str(i),
         {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST, 'marking':
          'EF,EF', 'units': 'ms'}),
        ('Ping (ms) UDP EF STA' + str(i) + '::loss',
         {'units': 'Kbps', 'runner': 'null'}),
        ('Ping (ms) UDP EF STA' + str(i) + '::delay_up',
         {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP EF STA' + str(i) + '::delay_down',
         {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BK' + ' STA' + str(i),
         {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST, 'marking':
          'CS1,CS1', 'units': 'ms'}),
        ('Ping (ms) UDP BK STA' + str(i) + '::loss',
         {'units': 'Kbps', 'runner': 'null'}),
        ('Ping (ms) UDP BK STA' + str(i) + '::delay_up',
         {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BK STA' + str(i) + '::delay_down',
         {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BE' + ' STA' + str(i),
         {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST, 'units': 'ms'}),
        ('Ping (ms) UDP BE STA' + str(i) + '::loss',
         {'units': 'Kbps', 'runner': 'null'}),
        ('Ping (ms) UDP BE STA' + str(i) + '::delay_up',
         {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BE STA' + str(i) + '::delay_down',
         {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) ICMP' + ' STA' + str(i),
         {'ip_version': IP_VERSION, 'interval': STEP_SIZE, 'length': TOTAL_LENGTH,
          'host': HOST, 'units': 'ms', 'runner': 'ping'}),
        ('Ping (ms) avg' + ' STA' + str(i),
         {'apply_to': [glob("Ping (ms)*" + ' STA' + str(i))],
          'units': 'ms',
          'runner': 'average',}),
        #('Packet loss avg' + ' STA' + str(i),
        #{'apply_to': [glob("Ping (ms)*" + ' STA' + str(i) + '::loss')],
        #'units': 'Kbps',
        #'runner': 'sum',}),
        ])

#Maps each idx(runner-id) to the corresponding STA:
idx=0
for sta_index in range(len(REMOTE_STA)):
    for _ in range(len(DATA_SETS)//len(REMOTE_STA)):
        if(REMOTE_STA[sta_index] != 'localhost'):
            REMOTE_HOSTS[idx] = REMOTE_STA[sta_index]
            idx+=1


#Runners for data from all STAs:
DATA_SETS.update([
    ('Ping (ms) avg all STAs',
     {'apply_to': [glob("Ping (ms)*",exclude=["Ping (ms) avg*"])],
      'units': 'ms',
      'runner': 'average',}),

    #('TCP totals' + ' STA' + str(i),
    #   {'apply_to': [glob("TCP*" + " STA*", exclude=["TCP totals STA*","TCP download avg*", "TCP download sum*", "TCP upload avg*", "TCP upload sum*"])],
    #    'units': 'Mbits/s',
    #    'runner': 'sum',}),

    ('TCP upload avg all STAs',
     {'apply_to': [glob("TCP upload sum*")],
      'units': 'Mbits/s',
      'runner': 'average',}),
    ('TCP download avg all STAs',
     {'apply_to': [glob("TCP download sum*")],
      'units': 'Mbits/s',
      'runner': 'average',}),
])

PLOTS = o([])

for router in REMOTE_METADATA:
    PLOTS.update([
        ('CPU Stats ' + router,
         {'description': "CPU Utilizaiton",
          'type': 'timeseries',
          'legend_title': 'CPU Utilization',
          'series':[{'data': 'CPU Stats ' + router,
                     'label': router}]})
    ])

#Plot for each STA:
for i in range(len_remote_sta):
    PLOTS.update([
        ('download STA' + str(i),
         {'description': 'Download bandwidth plot',
          'type': 'timeseries',
          'legend_title': 'TCP download',
          'series': [{'data': 'TCP download BE STA' + str(i),
                      'label': 'BE'},
                     {'data': 'TCP download BE1 STA' + str(i),
                      'label': 'BE1'},
                     {'data': 'TCP download BE2 STA' + str(i),
                      'label': 'BE2'},
                     {'data': 'TCP download BE3 STA' + str(i),
                      'label': 'BE3'},
                     {'data': 'TCP download avg STA' + str(i),
                      'label': 'Avg',
                      'smoothing': 10,
                      'color': 'black',
                      'linewidth': 1}]}),
        ('download_scaled STA' + str(i),
         {'description': 'Download bandwidth w/axes scaled to remove outliers',
          'parent': 'download STA' + str(i),
          'scaling': (5,95)}),

        ('ping STA' + str(i),
         {'description': 'Ping plot',
          'type': 'timeseries',
          'legend_title': 'Ping (ms)',
          'axis_labels': ['Latency (ms)'],
          'series': [
              {'data': glob('Ping (ms)*' + ' STA' + str(i), exclude=['Ping (ms) avg']),
               'label': ''},
              {'data': 'Ping (ms) avg STA' + str(i),
               'label': 'Avg',
               'smoothing': 10,
               'color': 'black',
               'linewidth': 2}]}),

        ('ping_scaled STA' + str(i),
         {'description': 'Ping w/axes scaled to remove outliers',
          'parent': 'ping STA' + str(i),
          'scaling': (5,95)}),

        ('ping_cdf STA' + str(i),
         {'description': 'Ping CDF plot',
          'type': 'cdf',
          'axis_labels': ['Latency (ms)'],
          'series': [{'data': glob('Ping (ms)*', exclude=['Ping (ms) avg']),
                      'label': ''}],
          'cutoff': (DELAY,-DELAY)}),

        ('ping_cdf_scaled STA' + str(i),
         {'description': 'Ping CDF plot scaled',
          'xlim': (0, 300),
          'parent': 'ping_cdf STA' +str(i)}),
        
        ('icmp_cdf STA' + str(i),
         {'description': 'ICMP CDF plot',
          'type': 'cdf',
          'axis_labels': ['Latency (ms)'],
          'series': [{'data': glob('Ping (ms) ICMP' + ' STA' + str(i)),
                      'label': 'Ping (ms)'},
          ],
          'cutoff': (DELAY,-DELAY)}),

        ('totals_bandwidth STA' + str(i),
         {'description': 'Total bandwidth',
          'type': 'timeseries',
          'series': [{'data': 'TCP download sum STA' + str(i),
                      'label': 'Download',
                      'smoothing': 10}]}),
        ('totals STA' + str(i),
         {'description': 'Total bandwidth and average ping plot',
          'type': 'timeseries',
          'dual_axes': True,
          'axis_labels': [None, 'Latency (ms)'],
          'series': [{'data': 'TCP download sum STA' + str(i),
                      'label': 'Download',
                      'smoothing': 10},
                     {'data': 'Ping (ms) avg STA' + str(i),
                      'label': 'Ping (ms)',
                      'smoothing': 10,
                      'axis': 2}]}),
        ('totals_scaled STA' + str(i),
         {'description': 'Total bandwidth and average ping plot (scaled)',
          'parent': 'totals STA' + str(i),
          'scaling': (5,95)}),

        ('all_scaled STA' + str(i),
         {'description': 'Download, ping (scaled versions)',
          'type': 'meta',
          'subplots': ('download_scaled STA' + str(i), 'ping_scaled STA' + str(i))}),

        ('all STA' + str(i),
         {'description': 'Download, ping (unscaled versions)',
          'type': 'meta',
          'subplots': ('download STA' + str(i), 'ping STA' + str(i))}),

        ('Packet_loss_BE STA' + str(i),
         {'description': 'Packet loss plot',
          'type': 'timeseries',
          'legend_title': 'Loss',
          'axis_labels': ['Packet loss(%)'],
          'series': [
              {'data': 'Ping (ms) UDP BE STA' + str(i) + '::loss',
               'label': 'Packet loss BE',
               'linestyle': '',
               'marker': '.',}]}),
        ('Packet_loss_BK STA' + str(i),
         {'description': 'Packet loss plot',
          'type': 'timeseries',
          'legend_title': 'Loss',
          'axis_labels': ['Packet loss(%)'],
          'series': [
              {'data': 'Ping (ms) UDP BK STA' + str(i) + '::loss',
               'label': 'Packet loss BK',
               'linestyle': '',
               'marker': '.',}]}),
        ('Packet_loss_EF STA' + str(i),
         {'description': 'Packet loss plot',
          'type': 'timeseries',
          'legend_title': 'Loss',
          'axis_labels': ['Packet loss(%)'],
          'series': [
              {'data': 'Ping (ms) UDP EF STA' + str(i) + '::loss',
               'label': 'Packet loss_EF',
               'linestyle': '',
               'marker': '.',}]}),
        ('all_Packet_loss STA' + str(i),
         {'description': 'All Loss',
          'type': 'meta',
          'subplots': ('Packet_loss_BE STA' + str(i), 'Packet_loss_BK STA' + str(i), 'Packet_loss_EF STA' + str(i))}),
        ])
    #Plots for all STAs:
PLOTS.update([

    ('Throughput',
     {'description': 'Download bandwith',
      'type': 'timeseries',
      'dual_axes': False,
      'axis_labels': ["Mbit/s"],
      'series': [{'data': glob('TCP download sum STA*'),
                  'label': 'Download',
                  'linestyle': '--'},
                 {'data': glob('TCP*avg all STAs'),
                  'label': 'Avg',
                  'smoothing': 10,
                  'linewidth': 1}]}),

    ('ping_BE_all_STAs',
     {'description': 'UDP BE Latency all STAs',
      'type': 'timeseries',
      'legend_title': 'Ping (ms)',
      'axis_labels': ['Latency (ms)'],
      'series': [
          #{'data': 'Ping (ms) avg all STAs',
          # 'label': 'Avg',
          # 'smoothing': 10,
          # 'color': 'black',
          # 'linewidth': 2},
                 {'data': glob('Ping (ms) UDP BE STA*'),
                  'label': ''}]}),
    ('ping_EF_all_STAs',
     {'description': 'UDP EF Latency all STAs',
      'type': 'timeseries',
      'legend_title': 'Ping (ms)',
      'axis_labels': ['Latency (ms)'],
      'series': [{'data': glob('Ping (ms) UDP EF STA*'),
                  'label': ''}]}),

    ('ping_scaled_all_STAs',
     {'description': 'Ping w/axes scaled to remove outliers',
      'parent': 'ping_BE_all_STAs',
      'scaling': (5,95)}),

    ('Packet_loss_BE_all_STAs',
     {'description': 'Packet loss plot',
      'type': 'timeseries',
      'legend_title': 'Loss',
      'axis_labels': ['Packet loss(%)'],
      'series': [
          {'data': glob('Ping (ms) UDP BE STA*' + '::loss'),
           'label': 'Packet loss BE',
           'linestyle': '-'}]}),
    ('Packet_loss_EF_all_STAs',
     {'description': 'Packet loss EF all STAs',
      'type': 'timeseries',
      'legend_title': 'Loss',
      'axis_labels': ['Packet loss(%)'],
      'series': [
          {'data': glob('Ping (ms) UDP EF STA*' + '::loss'),
           'label': 'Packet loss EF',
           'linestyle': '-'}]}),
    ('Throughput_Ping_Loss STA' + str(i),
     {'description': 'Plot of Throughput, Ping and Packet Loss for all STAs',
      'type': 'meta',
      'subplots': ('Throughput','ping_BE_all_STAs', 'Packet_loss_BE_all_STAs')}),


])

include("common.inc")
