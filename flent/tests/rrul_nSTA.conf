## -*- mode: python; coding: utf-8 -*-

## rrul test specification
#import numpy as np
include("netperf_definitions.inc")
DESCRIPTION="Realtime Response Under Load"
DEFAULTS={'PLOT': "all_scaled STA0"}

DATA_SETS = o([])


#Tests that wil run on all STAs:
#len_remote_sta = np.size(np.asarray(REMOTE_STA))
#len_remote_sta = int(len(REMOTE_STA.copy()))
len_remote_sta = 2 #len(REMOTE_STA)

#Runners for data on each STA:
for i in range(len_remote_sta):
    DATA_SETS.update([
        ('TCP upload BE' + ' STA' + str(i),
        {'test': 'TCP_STREAM', 'length': LENGTH, 'host': HOST, 'marking': 'CS0,CS0',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo', 'id': 'BE'}),
        ('TCP upload BK' + ' STA' + str(i),
        {'test': 'TCP_STREAM', 'length': LENGTH, 'host': HOST, 'marking': 'CS1,CS1',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo', 'id': 'BK'}),
        ('TCP upload CS5' + ' STA' + str(i),
        {'test': 'TCP_STREAM', 'length': LENGTH, 'host': HOST, 'marking': 'CS5,CS5',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo', 'id': 'CS5'}),
        ('TCP upload EF' + ' STA' + str(i),
        {'test': 'TCP_STREAM', 'length': LENGTH, 'host': HOST, 'marking': 'EF,EF',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo', 'id': 'EF'}),
        ('TCP upload avg' + ' STA' + str(i),
        {'apply_to': [glob("TCP upload*" + " STA" + str(i), exclude=["TCP upload sum*","TCP upload avg*"])],
        'units': 'Mbits/s',
        'id': 'Avg',
        'runner': 'average',}),
        ('TCP upload sum' + ' STA' + str(i),
        {'apply_to': [glob("TCP upload*" + " STA" + str(i), exclude=["TCP upload sum*","TCP upload avg*"])],
        'units': 'Mbits/s',
        'runner': 'sum',}),

        ('TCP download BE' + ' STA' + str(i),
        {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS0,CS0',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download BK' + ' STA' + str(i),
        {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS1,CS1',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download CS5' + ' STA' + str(i),
        {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'CS5,CS5',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download EF' + ' STA' + str(i),
        {'test': 'TCP_MAERTS', 'length': LENGTH, 'host': HOST, 'marking': 'EF,EF',
        'delay': DELAY, 'units': 'Mbits/s', 'runner': 'netperf_demo'}),
        ('TCP download avg' + ' STA' + str(i),
        {'apply_to': [glob("TCP download*" + " STA" + str(i), exclude=["TCP download sum*","TCP download avg*"])],
        'units': 'Mbits/s',
        'runner': 'average',}),
        ('TCP download sum' + ' STA' + str(i),
        {'apply_to': [glob("TCP download*" + " STA" + str(i), exclude=["TCP download sum*","TCP download avg*"])],
        'units': 'Mbits/s',
        'runner': 'sum',}),
        
        ('TCP totals' + ' STA' + str(i),
        {'apply_to': [glob("TCP*" + " STA" + str(i), exclude=["TCP totals STA*","TCP download avg*", "TCP download sum*", "TCP upload avg*", "TCP upload sum*"])],
        'units': 'Mbits/s',
        'runner': 'sum',}),

        #('Packet loss',
        #  {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST,
        #  'units': 'Kbps',}
        ('Ping (ms) UDP EF' + ' STA' + str(i),
        {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST, 'marking':
        'EF,EF', 'units': 'ms', 'id': '%s UDP EF' % HOST}),
        ('Ping (ms) UDP EF STA' + str(i) + '::loss',
        {'units': 'Kbps', 'runner': 'null'}),
        ('Ping (ms) UDP EF STA' + str(i) + '::delay_up',
        {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP EF STA' + str(i) + '::delay_down',
        {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BK' + ' STA' + str(i),
        {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST, 'marking':
        'CS1,CS1', 'units': 'ms', 'id': '%s UDP BK' % HOST}),
        ('Ping (ms) UDP BK STA' + str(i) + '::loss',
        {'units': 'Kbps', 'runner': 'null'}),
        ('Ping (ms) UDP BK STA' + str(i) + '::delay_up',
        {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BK STA' + str(i) + '::delay_down',
        {'units': 'ms', 'runner': 'null'}), 
        ('Ping (ms) UDP BE' + ' STA' + str(i),
        {'runner': 'udp_rtt', 'length': TOTAL_LENGTH, 'host': HOST, 'units': 'ms',
        'id': '%s UDP BE' % HOST}),
        ('Ping (ms) UDP BE STA' + str(i) + '::loss',
        {'units': 'Kbps', 'runner': 'null'}), 
        ('Ping (ms) UDP BE STA' + str(i) + '::delay_up',
        {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) UDP BE STA' + str(i) + '::delay_down',
        {'units': 'ms', 'runner': 'null'}),
        ('Ping (ms) ICMP' + ' STA' + str(i),
        {'ip_version': IP_VERSION, 'interval': STEP_SIZE, 'length': TOTAL_LENGTH,
        'host': HOST, 'units': 'ms', 'runner': 'ping', 'id': '%s ICMP' % HOST}),
        ('Ping (ms) avg' + ' STA' + str(i),
        {'apply_to': [glob("Ping (ms)*" + ' STA' + str(i))],
        'units': 'ms',
        'runner': 'average',}),
        #('Packet loss avg' + ' STA' + str(i),
        #{'apply_to': [glob("Ping (ms)*" + ' STA' + str(i) + '::loss')],
        #'units': 'Kbps',
        #'runner': 'sum',}),
        ])

#Maps each idx(runner-id) to the corresponding STA:
idx=0
for sta_index in range(len(REMOTE_STA)):
    for _ in range(len(DATA_SETS)//len(REMOTE_STA)):
        if(REMOTE_STA[sta_index] != 'localhost'):
            REMOTE_HOSTS[idx] = REMOTE_STA[sta_index]
        idx+=1


#Runners for data from all STAs:
DATA_SETS.update([
    ('Ping (ms) avg all STAs',
        {'apply_to': [glob("Ping (ms)*",exclude=["Ping (ms) avg*"])],
        'units': 'ms',
        'runner': 'average',}),

    #('TCP totals' + ' STA' + str(i),
    #   {'apply_to': [glob("TCP*" + " STA*", exclude=["TCP totals STA*","TCP download avg*", "TCP download sum*", "TCP upload avg*", "TCP upload sum*"])],
    #    'units': 'Mbits/s',
    #    'runner': 'sum',}),

    ('TCP upload avg all STAs',
        {'apply_to': [glob("TCP upload sum*")],
        'units': 'Mbits/s',
        'runner': 'average',}),
    ('TCP download avg all STAs',
        {'apply_to': [glob("TCP download sum*")],
        'units': 'Mbits/s',
        'runner': 'average',}),
])



PLOTS = o([])

#Plot for each STA:
for i in range(len_remote_sta):
    PLOTS.update([
        ('download STA' + str(i),
        {'description': 'Download bandwidth plot',
        'type': 'timeseries',
        'legend_title': 'TCP download',
        'series': [{'data': 'TCP download BE STA' + str(i),
                    'label': 'BE'},
                    {'data': 'TCP download BK STA' + str(i),
                    'label': 'BK'},
                    {'data': 'TCP download CS5 STA' + str(i),
                    'label': 'CS5'},
                    {'data': 'TCP download EF STA' + str(i),
                    'label': 'EF'},
                    {'data': 'TCP download avg STA' + str(i),
                    'label': 'Avg',
                    'smoothing': 10,
                    'color': 'black',
                    'linewidth': 2}]}),
        ('download_scaled STA' + str(i),
        {'description': 'Download bandwidth w/axes scaled to remove outliers',
        'parent': 'download STA' + str(i),
        'scaling': (5,95)}),

        ('upload STA' + str(i),
        {'description': 'Upload bandwidth plot',
        'type': 'timeseries',
        'legend_title': 'TCP upload',
        'series': [{'data': 'TCP upload BE STA' + str(i),
                    'label': 'BE'},
                    {'data': 'TCP upload BK STA' + str(i),
                    'label': 'BK'},
                    {'data': 'TCP upload CS5 STA' + str(i),
                    'label': 'CS5'},
                    {'data': 'TCP upload EF STA' + str(i),
                    'label': 'EF'},
                    {'data': 'TCP upload avg STA' + str(i),
                    'label': 'Avg',
                    'smoothing': 10,
                    'color': 'black',
                    'linewidth': 2}]}),

        ('upload_scaled STA' + str(i),
        {'description': 'Upload bandwidth w/axes scaled to remove outliers',
        'parent': 'upload STA' + str(i),
        'scaling': (5,95)}),

        ('ping STA' + str(i),
        {'description': 'Ping plot',
        'type': 'timeseries',
        'legend_title': 'Ping (ms)',
        'axis_labels': ['Latency (ms)'],
        'series': [
                    {'data': glob('Ping (ms)*' + ' STA' + str(i), exclude=['Ping (ms) avg']),
                    'label': ''},
                    {'data': 'Ping (ms) avg STA' + str(i),
                    'label': 'Avg',
                    'smoothing': 10,
                    'color': 'black',
                    'linewidth': 2}]}),

        ('ping_scaled STA' + str(i),
        {'description': 'Ping w/axes scaled to remove outliers',
        'parent': 'ping STA' + str(i),
        'scaling': (5,95)}),

        ('ping_cdf STA' + str(i),
        {'description': 'Ping CDF plot',
        'type': 'cdf',
        'axis_labels': ['Latency (ms)'],
        'parent': 'ping STA' + str(i),
        'cutoff': (DELAY,-DELAY)}),

        ('icmp_cdf STA' + str(i),
        {'description': 'ICMP CDF plot',
        'type': 'cdf',
        'axis_labels': ['Latency (ms)'],
        'series': [{'data': glob('Ping (ms) ICMP' + ' STA' + str(i)),
                    'label': 'Ping (ms)'},
                    ],
        'cutoff': (DELAY,-DELAY)}),

        ('totals_bandwidth STA' + str(i),
        {'description': 'Total bandwidth',
        'type': 'timeseries',
        'series': [{'data': 'TCP download sum STA' + str(i),
                    'label': 'Download',
                    'smoothing': 10},
                    {'data': 'TCP upload sum STA' + str(i),
                    'label': 'Upload',
                    'smoothing': 10}]}),
        ('totals STA' + str(i),
        {'description': 'Total bandwidth and average ping plot',
        'type': 'timeseries',
        'dual_axes': True,
        'axis_labels': [None, 'Latency (ms)'],
        'series': [{'data': 'TCP download sum STA' + str(i),
                    'label': 'Download',
                    'smoothing': 10},
                    {'data': 'TCP upload sum STA' + str(i),
                    'label': 'Upload',
                    'smoothing': 10},
                    {'data': 'Ping (ms) avg STA' + str(i),
                    'label': 'Ping (ms)',
                    'smoothing': 10,
                    'axis': 2}]}),
        ('totals_scaled STA' + str(i),
        {'description': 'Total bandwidth and average ping plot (scaled)',
        'parent': 'totals STA' + str(i),
        'scaling': (5,95)}),

        ('all_scaled STA' + str(i),
        {'description': 'Download, upload, ping (scaled versions)',
        'type': 'meta',
        'subplots': ('download_scaled STA' + str(i), 'upload_scaled STA' + str(i), 'ping_scaled STA' + str(i))}),

        ('all STA' + str(i),
        {'description': 'Download, upload, ping (unscaled versions)',
        'type': 'meta',
        'subplots': ('download STA' + str(i), 'upload STA' + str(i), 'ping STA' + str(i))}),

        ('Packet_loss_BE STA' + str(i),
        {'description': 'Packet loss plot',
        'type': 'timeseries',
        'legend_title': 'Loss',
        'axis_labels': ['Packet loss(%)'],
        'series': [
                    {'data': 'Ping (ms) UDP BE STA' + str(i) + '::loss',
                    'label': 'Packet loss BE',
                    'linestyle': '',
                    'marker': '.',}]}),
        ('Packet_loss_BK STA' + str(i),
        {'description': 'Packet loss plot',
        'type': 'timeseries',
        'legend_title': 'Loss',
        'axis_labels': ['Packet loss(%)'],
        'series': [
                    {'data': 'Ping (ms) UDP BK STA' + str(i) + '::loss',
                    'label': 'Packet loss BK',
                    'linestyle': '',
                    'marker': '.',}]}),
        ('Packet_loss_EF STA' + str(i),
        {'description': 'Packet loss plot',
        'type': 'timeseries',
        'legend_title': 'Loss',
        'axis_labels': ['Packet loss(%)'],
        'series': [
                    {'data': 'Ping (ms) UDP EF STA' + str(i) + '::loss',
                    'label': 'Packet loss_EF',
                    'linestyle': '',
                    'marker': '.',}]}),
        ('all_Packet_loss STA' + str(i),
        {'description': 'All Loss',
        'type': 'meta',
        'subplots': ('Packet_loss_BE STA' + str(i), 'Packet_loss_BK STA' + str(i), 'Packet_loss_EF STA' + str(i))}),
                                                                                       
        ])
#Plots for all STAs:
PLOTS.update([

    ('Throughput',
     {'description': 'Upload and download bandwith',
      'type': 'timeseries',
      'dual_axes': True,
      'axis_labels': [None, 'Latency (ms)'],
      'series': [{'data': glob('TCP download sum STA*'),
                  'label': 'Download',
                  'smoothing': 10,
                  'linestyle': '--'},
                 {'data': glob('TCP upload sum STA*'),
                  'label': 'Upload',
                  'smoothing': 10,
                  'linestyle': '--'},
                 {'data': glob('TCP*avg all STAs'),
                  'label': 'Avg',
                  'smoothing': 10,
                  'linewidth': 2}]}),    

    ('ping_BE_all_STAs',
     {'description': 'Ping plot',
      'type': 'timeseries',
      'legend_title': 'Ping (ms)',
      'axis_labels': ['Latency (ms)'],
      'series': [
                 #{'data': 'Ping (ms) avg all STAs',
                 # 'label': 'Avg',
                 # 'smoothing': 10,
                 # 'color': 'black',
                 # 'linewidth': 2},
                 {'data': glob('Ping (ms) UDP BE STA*'),
                    'label': ''}]}),

    ('ping_scaled_all_STAs',
     {'description': 'Ping w/axes scaled to remove outliers',
      'parent': 'ping_BE_all_STAs',
      'scaling': (5,95)}),
    
    ('Packet_loss_BE_all_STAs',
        {'description': 'Packet loss plot',
         'type': 'timeseries',
         'legend_title': 'Loss',
         'axis_labels': ['Packet loss(%)'],
         'series': [
                    {'data': glob('Ping (ms) UDP BE STA*' + '::loss'),
                    'label': 'Packet loss BE',
                    'linestyle': '-'}]}),
    ('Throughput_Ping_Loss STA' + str(i),
        {'description': 'Plot of Throughput, Ping and Packet Loss for all STAs',
         'type': 'meta',
         'subplots': ('Throughput','ping_BE_all_STAs', 'Packet_loss_BE_all_STAs')}),


])

#include("common.inc")
